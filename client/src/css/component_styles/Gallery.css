/* Тут начинается наша карусель. Блок .carousel-wrapper спозиционирован относительно, абертки .carousel-item абсолютно.
. */
.carousel-wrapper {
    position: relative;
}

/* Абсолютно спозиционированные блоки получают высоту и ширину от родителя.
Мы сделали их прозрачными по умолчанию, и потом они будут плавно появляться по нажатию на ссылки .arrow-prevи .arrow-next. */
.carousel-item {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 25px 50px;
    opacity: 0;
    /*transition: all 0.5 sease-in-out;*/
}

/* Заметили padding слева и справа по 50px? Таким способом мы можем позиционировать наши ссылки! Каждая будет по 50px шириной. Кроме того, я использую пустые ссылки с фоновым рисунком таким образом, что ссылки выглядят как стрелки. Проверьте, поменяли ли вы URL ссылок с оригинальным URL, чтобы ваши ссылки не были просто прозрачными прямоугольниками. */
.arrow {
    position: absolute;
    top: 0;
    display: block;
    width: 50px;
    height: 100%;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    background: url("../../../../server/static/bc7cf54f-b137-4bff-a141-e28a9b135d5b.jpg") 50% 50%/20px no-repeat;
}
/* Давайте вернем нашу стрелку налево. */
.arrow-prev{
     left:0;
 }

/* А вторую направо. Поскольку я использую одно и то же изображение для стрелки, я поворачиваю его на 180 градусов. */
.arrow-next{
     right:0;
     -webkit-transform: rotate(180deg);
     transform:rotate(180deg);}

/* Мне очень нравится, как слайды карусели смотрятся на темном фоне, и если блок .carousel-itemимеет класс 'light',
мы изменим его текст на белый и используем белые стрелки вместо серых. Проверьте еще раз, правильно ли указан путь к изображению стрелки */
.light {
     color: white;
 }

.arrow{
    background:url("../../../../server/static/bc7cf54f-b137-4bff-a141-e28a9b135d5b.jpg") 50% 50% /20px no-repeat;
}


/* Напишем медиа-запрос для изменения размера стрелок на устройствах с меньшим размером экрана.*/

@media(max-width:480px){
    .arrow, .light.arrow{
                background-size:10px;
                background-position:10px 50%;
            }
}


/* Установим целям для ссылок значение display: none; Таким образом, мы избавляемся от постоянного перепрыгивания браузера в самый верх карусели при каждом нажатии на стрелки. Это свойство действует для любых элементов, чей идентификатор начинается на 'target-item'. */
[id^="target-item"]{
    display:none;
}

/* Выше мы сделали все наши слайды карусели прозрачными, а это значит, что во время загрузки карусели мы будем получать вместо нее большое пустое поле.
Изменим значение прозрачности для первого слайда на 1 для отображения. Так же устанавливаем z-index значение 2, позиционируя его выше остальных слайдов. */
.item-1{
    z-index:2;
    opacity:1;
}

/* Но нам не нужно, чтобы первый слайд всегда имел значение прозрачностиopacity: 1; в противном случае нам придется пробираться через этот слайд, во время ротации остальных. */
*:target~.item-1{
    opacity:0;
}

/* ..но если #target-item-1 в фокусе, и мы хотим показать первый слайд, тогда выбираем его с помощью значка ~ и устанавливаем прозрачность опять в 1:-) */
#target-item-1:target~.item-1{
    opacity:1;
}

/* Если другие target-item-# в фокусе, выбираем их используя ~ селектор, плавно показываем, и размещаем их сверху с помощьюz-index: 3.
Тут вы можете добавить дополнительные spanс идентификатором target-item, если их у вас будет больше трех. Может сразу и добавить 10 штук.. */
#target-item-2:target~.item-2,#target-item-3:target~.item-3{
    z-index:3;
    opacity:1;
}